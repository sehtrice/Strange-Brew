#!/bin/bash
##################################################################################################
# Git Pull remote changes from specific branch for all Current Working Repos v 1.1
#
# Written 10/28/2015 by Seth (DrumLordJr) Rice
# That Friggin Guy - sethrice@gmail.com
#
##################################################################################################
# Things to add:
#
# Change Log:
# 10/29/15 - 1.0 - Created
# 12/08/15 - 1.1 - Add functionality to specify check against single specific git path by leaving
#		   out the '/' at the end of the path declaired.
#
##################################################################################################
#
# Show Options for Usage
if [ ${#@} != 2 ]; then
  echo "==========================================================================================="
  echo "  Usage: $0 <local-git-path> <branch>"
  echo
  echo "    <local-git-path>      Local GIT repo path"
  echo "    <branch-name>         Branch name you wish to pull for"
  echo
  echo " Example:                 $0 '/opt/GIT-WORKING/puppet/' 'production' "
  echo "                          $0 '/opt/GIT-WORKING/puppet/modules/' 'production' "
  echo "		or for a single specified repo, leave off trailing slash "
  echo "			  $0 '/opt/GIT-WORKING/puppet/puppet-src' 'production' "
  echo
  echo " Summary:"
  echo " Pull remote changes for all repo working subdirectories for the specified branch"
  echo " Or for specified directory git repo by leaving off the trailing slash"
  echo
  echo "==========================================================================================="
  echo
  exit
fi

echo "Pulling update for branch $2"

# Check for trailing slash to determine if it should check multiple or single git repo paths.
determine=$(echo $1 | grep -Ei '.+\/[a-z,0-9._-]+$')

if [[ $determine ]] ; then
	echo $1
	cd $1
	git pull origin $2
	exit
else
	for i in `ls $1 | grep -ivE "(modules)"`; do
		echo $1$i;
		cd $1$i;
		git pull origin $2;
		cd ..;
		echo ;
	done
fi
